---
title: "Building RAPs with R - Part 1.7"
author: "Erika Duan"
date: "`r Sys.Date()`"

execute:
  echo: true
  output: false
  message: false
  warning: false

format:
  gfm:
    toc: true
---

```{r}
#| echo: false 

# Load required R packages -----------------------------------------------------
if (!require("pacman")) install.packages("pacman")
pacman::p_load(here,
               dplyr,
               ggplot2) 
```

# Writing reports for data projects     

A typical analytical project also contains a report or presentation component. The process to generate a report can be tedious if our process requires manually updating report outputs like figures, tables or numbers.    

An ideal analytical project workflow involves integrating the report or presentation generation step as a component in your workflow that starts from the same source code as your analysis. This is the practice of **literate programming**, where a workflow contains both code and descriptive prose and compiles a report with directly embedded data analysis.   

```{mermaid}
flowchart LR

A("Clean and 
analyse data") --> B("Draft report")  

B --> C("Change report parameters,
update data or
fix mistakes")

C -. Rerun code .-> A
```

There are two tools for literate programming in R:  
+ `knitr` - built in 2012 and provides the widely used R Markdown format. To render an R Markdown document into a PDF, the `rmarkdown::render()` function first converts the Rmd file into a source LaTex file and then converts that LaTex file into a PDF. This is why you need a working LaTeX distribution to compile PDF documents.           
+ `quarto` - superseded `knitr` as the preferred format for the RStudio IDE in 2022 and is also compatible with Jupyter notebooks. Combines the functionality of R Markdown and other packages for creating websites or PowerPoint presentations in a single standalone package.      

**Note:** It is a matter of user preference to use either `knitr` or `quarto`, as `knitr` will continue to be supported in R alongside `quarto` and the cost of switching from one to the other format is negligible for R users.     

## Basic `knitr` tips    

The Markdown syntax is rendered by R Markdown and Quarto notebooks for R, Jupyter notebooks for Python and markdown documents by code repositories like GitHub and BitBucket. Cheat sheets can be found for [Markdown](https://www.markdownguide.org/cheat-sheet/) and [R Markdown](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf) syntax.    

Code block options can be set globally using the syntax below for [Quarto notebooks](https://quarto.org/docs/computations/execution-options.html).  

```{r}
#| eval: false
---
title: "Building RAPs with R - Part 1.7"
author: "Erika Duan"
date: "`r Sys.Date()`"

execute:
  echo: true
  output: false
  message: false
  warning: false
---
```

Global options can be overwritten locally by specifying options like `#| echo: false` at the beginning of individual code chunks.    

Code is evaluated inside code blocks or an inline code chunk. Inline code chunks are created using single backward ticks and are useful for outputting parameters in sentences and paragraphs in a report.   

LaTeX equations are authored using standard Pandoc markdown syntax and rendered for PDF and HTML outputs.     

# Minimise code repetition for report generation  

## Generate simple code templates  

We can create report templates using functions that, for example, output different tables given different function inputs.  

```{r}
# Create a function that outputs a count table in Rmd or Qmd notebooks ---------
print_count_table <- function(dataset, count_by) {
  dataset |>
    dplyr::count(!!rlang::ensym(count_by)) |>
    knitr::kable()
}

# When print_count_table() is executed inside a code chunk with echo: false, 
# only the table is outputted when the notebook is rendered. 
```

```{r}
#| echo: false
#| output: true
print_count_table(iris, Species)
```

## Generate code templates outputting text  

We can extend our code template further by creating a function that first generates a subheading for the variable of interest and then outputs the count table. The function `knitr::knit_expand()` allows us to do this, as expressions encapsulated inside `{{}}` are expanded to their value in R.   

```{r}
# Create a function that additionally outputs a subheading and count table -----
print_count_table_section <- function(dataset, count_by) {
  output <- knitr::knit_expand(
    text = c(
      # Print subheading  
      "### Frequency table for variable: {{variable}}",
      
      # Print count table under the subheading
      print_count_table(dataset, !!rlang::ensym(count_by))
    ),
    variable = count_by)
  
  cat(output, sep = "\n")
}

# When print_count_table_section() is executed inside a code chunk with 
# echo: false and output: asis, the subheading and table is outputted when the 
# notebook is rendered. 

# output: asis allows us to output literal R Markdown code (without rendering)
```

```{r}
#| echo: true
#| output: asis
print_count_table_section(iris, "Species")
```

If we need to apply the same template created by `print_count_table_section()` to multiple different variables in the same dataset, we can use `lapply()` with `invisible()` or `purrr:walk()`. As `print_count_table_section()` does not return an R object but prints outputs to the console, we need to use `invisible()` or `purrr:walk()` to remove NULL outputs.  

```{r}
#| echo: true
#| output: asis
invisible( # Suppresses NULL outputs from print_count_table_section()
  lapply(colnames(iris),
         print_count_table_section,
         dataset = sample_n(iris, 6))) 
```

# TODO

## Generate child documents for reports with plots    

[Child documents](https://bookdown.org/yihui/rmarkdown-cookbook/child-document.html) are smaller `.Rmd` or `.Qmd` documents that can be embedded into the parent i.e. final report document. These are useful when we need to print more complex objects like ggplots, which cannot be rendered using `knitr::knit_expand()`.   

An example of a standalone [child document](./raps_part_1_7_child_notebook.qmd) is linked. 

#TODO

```{r}
#| echo: false
#| output: asis
# output <- lapply(c("Sepal.Width", "Petal.Width"), function(x) {
#   knitr::knit_child(
#     'raps_part_1_7_child_notebook.qmd',
#     envir = environment(),
#     quiet = TRUE
#   )
# })
# 
# cat(unlist(output), sep = '\n')
```

#TODO 

The function `knitr::knit_child()` can be used to compile child notebooks inside a code chunk in the parent notebook. We can go one step further, however, and combine `lapply()` with `knitr::knit_child()`.   

```{r}
# When the child document is compiled inside a code chunk with 
# echo: false and output: asis, the entire child document is rendered.   
```



