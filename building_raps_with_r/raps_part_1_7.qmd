---
title: "Building RAPs with R - Part 1.7"
author: "Erika Duan"
date: "`r Sys.Date()`"

execute:
  echo: true
  output: true
  message: false
  warning: false

format:
  gfm:
    toc: true
---

```{r}
#| echo: false 

# Load required R packages -----------------------------------------------------
if (!require("pacman")) install.packages("pacman")
pacman::p_load(here,
               dplyr,
               ggplot2,
               flextable,
               modelsummary) 
```

# Writing reports for data projects

A typical analytical project also contains a report or presentation component. The process to generate a report can be tedious if our process requires manually updating report outputs like figures, tables or numbers.

An ideal analytical project workflow involves integrating the report or presentation generation step as a component in your workflow that starts from the same source code as your analysis. This is the practice of **literate programming**, where a workflow contains both code and descriptive prose and compiles a report with directly embedded data analysis.

```{mermaid}
flowchart LR

A("Clean and 
analyse data") --> B("Draft report")  

B --> C("Change report parameters,
update data or
fix mistakes")

C -. Rerun code .-> A
```

There are two tools for literate programming in R:\
+ `knitr` - built in 2012 and provides the widely used R Markdown format. To render an R Markdown document into a PDF, the `rmarkdown::render()` function first converts the Rmd file into a source LaTex file and then converts that LaTex file into a PDF. This is why you need a working LaTeX distribution to compile PDF documents.\
+ `quarto` - superseded `knitr` as the preferred format for the RStudio IDE in 2022 and is also compatible with Jupyter notebooks. Combines the functionality of R Markdown and other packages for creating websites or PowerPoint presentations in a single standalone package.

**Note:** It is a matter of user preference to use either `knitr` or `quarto`, as `knitr` will continue to be supported in R alongside `quarto` and the cost of switching from one to the other format is negligible for R users.

## Basic `knitr` tips

The Markdown syntax is rendered by R Markdown and Quarto notebooks for R, Jupyter notebooks for Python and markdown documents by code repositories like GitHub and BitBucket. Cheat sheets can be found for [Markdown](https://www.markdownguide.org/cheat-sheet/) and [R Markdown](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf) syntax.

Code block options can be set globally using the syntax below for [Quarto notebooks](https://quarto.org/docs/computations/execution-options.html).

```{r}
#| eval: false
---
title: "Building RAPs with R - Part 1.7"
author: "Erika Duan"
date: "`r Sys.Date()`"

execute:
  echo: true
  output: false
  message: false
  warning: false
---
```

Global options can be overwritten locally by specifying options like `#| echo: false` at the beginning of individual code chunks.

Code is evaluated inside code blocks or an inline code chunk. Inline code chunks are created using single backward ticks and are useful for outputting parameters in sentences and paragraphs in a report.

LaTeX equations are authored using standard Pandoc markdown syntax and rendered for PDF and HTML outputs.

# Minimise code repetition for report generation

## Generate simple report templates using functions   

We can create report templates using functions that, for example, output different tables given different function inputs.

```{r}
# Create a function that outputs a count table in Rmd or Qmd notebooks ---------
print_count_table <- function(dataset, count_by) {
  dataset |>
    dplyr::count(!!rlang::ensym(count_by)) |>
    knitr::kable()
}

# When print_count_table() is executed inside a code chunk with echo: false, 
# only the table is outputted when the notebook is rendered. For documentation
# purposes, we will set echo: true so the code remains visible.  

# We can also apply print_count_table() to multiple variables using lapply() or
# purrr::map() i.e. lapply(colnames(iris), print_count_table, dataset = iris)
```

```{r}
print_count_table(iris, Species)
```

## Generate report templates using `knitr::knit_expand()`   

We can extend our code template further by creating a function that first generates a subheading for the variable of interest and then outputs the count table. The function `knitr::knit_expand()` allows us to do this, as expressions encapsulated inside `{{}}` are expanded to their value in R.

```{r}
# Create a function that additionally outputs a subheading and count table -----
print_count_table_section <- function(dataset, count_by) {
  output <- knitr::knit_expand(
    text = c(
      # Print subheading  
      "### Frequency table for variable: {{variable}}",
      # Print count table under the subheading
      print_count_table(dataset, !!rlang::ensym(count_by))
    ),
    variable = count_by)
  
  cat(output, sep = "\n")
}

# When print_count_table_section() is executed inside a code chunk with 
# echo: false and output: asis, only the subheading and table are outputted when 
# the notebook is rendered. 

# output: asis allows us to output literal R Markdown code (without rendering)
```

```{r}
#| output: asis
print_count_table_section(iris, "Species")
```

If we need to apply the same template created by `print_count_table_section()` to multiple different variables in the same dataset, we can use `lapply()` with `invisible()` or `purrr:walk()`. As `print_count_table_section()` does not return an R object but prints outputs to the console, we need to use `invisible()` or `purrr:walk()` to remove NULL outputs.

```{r}
#| output: asis
withr::with_seed(
  seed = 111, 
  invisible( # Suppresses NULL outputs from print_count_table_section()
    lapply(colnames(iris),
           print_count_table_section,
           dataset = sample_n(iris, 6))) 
)
```

**Note:** `knitr::knit_expand` does not work predictably with additional text inserted in between the section heading and table, so `knitr::knit_child()` is recommended for creating report template functions.    

## Generate report templates using child documents   

[Child documents](https://bookdown.org/yihui/rmarkdown-cookbook/child-document.html) are smaller `.Rmd` or `.Qmd` notebooks that can be embedded into the parent notebook i.e. the final report template. Child documents are useful when we need to print more complex objects like ggplots, which cannot be rendered using `knitr::knit_expand()`.  

The function `knitr::knit_child()` can be used to compile child documents inside a code chunk in the parent notebook. We can combine `lapply()` with `knitr::knit_child()` to output the same template for multiple variables.   

An example of a standalone child document can be found [here](./raps_part_1_7_child_notebook.qmd). The value `x` is used in place of a hard-coded variable.

**Note:** For outputs to be printed correctly, the parent document code chunk must be set to `output: asis` and the relevant child document code chunks set to `output: asis` for tables and `output: true` for plots.  

```{r}
#| output: asis
output <- lapply(c("Petal.Width", "Species"), function(x) {
  knitr::knit_child(
    'raps_part_1_7_child_notebook.qmd',
    envir = environment(),
    quiet = TRUE
  )
})

cat(unlist(output), sep = '\n')
```

## Generate report templates using parameterised reports  

Parameterised reports are useful when you want to generate separate reports for each parameter of interest. An example of a standardised parameterised report can be found [here](./raps_part_1_7_parameterised_report.Rmd).   

**Note:** I currently recommend using `.Rmd` rather than `.Qmd` notebooks for generating parameterised reports, as the former solution is more stables.  

To set up report parameterisation:    

1. Replace hard-coded variable inputs with parameter keys throughout your report template. In contrast to child documents, parameterised report can store multiple parameters that must be explicitly assigned key-value pairs and referred to in the document body as `params$key`.            
2. List all parameters and set a default value for each parameter key in your global code chunk options. A quick way to check for template report code errors is by rendering a temporary report using the default parameter values.  

**Note:** When using parameterised reports with tidyverse functions, apply the same template across subcategories rather than across variables from the same dataset, as `dplyr::filter(var == params$condition)` works but `dplyr::summarise(mean = mean(params$variable))` does not.  
  
```{r}
#| eval: false
---
title: "Analysis of Iris data set by `r params$species` species"
output: github_document
date: "`r Sys.Date()`"  

params:
  species: "setosa"
---
```
  
3. Render the report template using a separate R script. The code below uses `lapply()` to apply the same `rmarkdown::render()` function for each continuous variable from the iris data set. An example of a rendered report can be accessed [here](./report_iris_setosa.md).      

```{r}  
#| eval: false

# Create function that renders an input report template ------------------------
# rmarkdown::render() renders an input report template as an output file and 
# accepts multiple parameters  
iris_variables <- unique(iris$Species) |>
  as.character()

render_report_by_var <- function(variable) {
  rmarkdown::render(
    input = "raps_part_1_7_parameterised_report.Rmd",
    output_format = rmarkdown::github_document(html_preview = FALSE), 
    output_file = paste0(
      "report_iris_", snakecase::to_snake_case(variable), ".md"
    ),
    params = list(
      species = variable))
}

# Apply render_report_by_var() to every iris variable excepting Species --------
lapply(
  iris_variables, 
  render_report_by_var
)
```

## Good packages for printing tables   

These packages work consistently across HTML, PDF or Microsoft Word outputs.   

+ The package `flextable` for any table type.  
+ The package `modelsummary` for regression and summary tables.  

```{r}
# Use flextable to output html table -------------------------------------------
iris |>
  group_by(Species) |> 
  summarise(across(everything(), mean)) |>
  flextable() |>
  set_caption(caption = "Mean value by iris species") |>
  theme_booktabs()
```

```{r}
# Use modelsummary to output regression results --------------------------------
model_1 <- lm(mpg ~ hp + am, data = mtcars)
model_2 <- lm(mpg ~ hp, data = mtcars)

# Store model results as list object
models <- list("Model 1" = model_1,
               "Model 2" = model_2)

modelsummary(models, output = "flextable")
```


# Other resources  

+ An in-depth [tutorial](https://book.rwithoutstatistics.com/parameterized-reports-chapter.html) on creating parameterised reports using `purrr::map()`.      