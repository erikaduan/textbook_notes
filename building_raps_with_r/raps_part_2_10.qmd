---
title: "Building RAPs with R - Part 2.10"
author: "Erika Duan"
date: "`r Sys.Date()`"   

execute:
  eval: false
  echo: true
  output: false
  message: false
  warning: false

format:
  gfm:
    toc: true
---

```{r}
#| echo: false 

# Load required R packages -----------------------------------------------------
if (!require("pacman")) install.packages("pacman")
pacman::p_load(here,
               renv) 
```

# Recording package versions with `renv`    

The principle behind `renv` is very simple:  

+ Install the package.  
+ Obtain a snapshot of the R version, all packages used and their versions in the `renv.lock` file. This JSON file should be saved at the root of your project and an example can be found [here](https://github.com/erikaduan/abs_labour_force_report/blob/main/renv.lock).     
+ This snapshot can be used to restore the project library in the future **without** interfering with other packages installed on your local machine.   

**Note:** the last feature occurs as `renv` creates a new R library for each project, which means that you can install multiple versions of a package i.e. `dplyr` on your local machine and `renv` tracks the specific `dplyr` version for each project.    

```{r}
# Record package versions with renv --------------------------------------------
# renv functions should be executed directly in the R console

renv::init()
# Searches for R package dependencies
# Copies packages into the cache
# Creates the lockfile
```

The function `renv::init()` creates:   

+ A project-specific root subdirectory named `renv`.   
+ A project-specific `.Rprofile` file which contains the line `source("renv/activate.R")`.       

**Note:** The `renv` subdirectory contains the subdirectory `library`, which contains our isolated project-specific library of R packages. The `library` subdirectory should not be committed by Git and a `.gitignore` file is automatically generated by `renv::init()` inside `./renv` to manage this.   

```{r}
# Restore package versions with renv -------------------------------------------
# Another user clones the remote code repository   

renv::restore() 
# Type Y to activate the project before restoring the renv lockfile
```

