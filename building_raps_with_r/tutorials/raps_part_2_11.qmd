---
title: "Building RAPs with R - Part 2.11"
author: "Erika Duan"
date: "`r Sys.Date()`"   

execute:
  eval: false
  echo: true
  output: false
  message: false
  warning: false

format:
  gfm:
    toc: true
---

```{r}
# Load required R packages -----------------------------------------------------
if (!require("pacman")) install.packages("pacman")
pacman::p_load(here,
               devtools,
               roxygen2,
               testthat,
               knitr)
```


# Packaging your code     

This tutorial will cover the [R packages textbook](https://r-pkgs.org/) by Hadley Wickham and Jennifer Bryan instead of the R package `fusen`.   

When your analytical project moves into R package development mode, you can use packages like `devtools` and `usethis` to improve the quality of your analytical code. These improvements include:  

+ Automatically generating documentation for custom functions with `roxygen2` and `devtools::document()`                 
+ Unit testing for custom functions with `usethis::use_test_that()`, `usethis::use_test()` and the `testthat` package         
+ Automatically defined external R package dependencies      

Organising analytical code into a package is beneficial because packages come with conventions (where to store code, tests and data). Standardised conventions lead to standardised tools like `devtools`.    

**Note:** Loading `devtools` also attaches all functions from `usethis`.   


# System setup for R package development   

To set up your operating system for optimal R package development:   

+ Make sure you have the latest version of R or at least R version 4.5+.    
+ Make sure you have a recent version of the RStudio IDE, as new IDE features are constantly being added.  
+ You will need to attach `devtools` every time you start a new R session. This happens multiple times during R package development and can be annoying. To automatically attach `devtools` in your `.Rprofile` startup file, run `devtools::use_devtools()` and add the following code to your `.Rprofile` startup file.   

  ```{r} 
  if (interactive()) {
  suppressMessages(require(devtools))
  }
  ```   
+ You can also store default package metadata and package development preferences in your `.Rprofile` startup file.   

  ```{r}
  options(
    usethis.description = list(
      "Authors@R" = utils::person(
        "Erika", "Duan",
        email = "erika.duan@example.com",
        role = c("aut", "cre"),
      ),
      License = "MIT + file LICENSE"
    )
  )
  ```   
+ Windows users also need to install [`Rtools`](https://cran.r-project.org/bin/windows/Rtools/). This is a toolchain bundle to build R packages that require C, C++ or Fortran code compilation from source. The easiest way to download or update Rtools is to run an R package development system setup check using `devtools::dev_sitrep()` within the RStudio IDE.    


# R package states   

## Source package   

When we create or modify a package, we are working on its source code and editing the source files. A source package is just a directory of files with a specific structure.   

## Bundled package  

A bundled package is a package that has been modified and reduced to a single file (a `.tar` file) and then compressed using gzip (a `.gz` file). Bundled packages generally have the extension `.tar.gz`. They are platform-agnostic and a transportation-friendly intermediary between a source and an installed package.     

Every CRAN package is available in bundled form via the package source field of its landing page. To unpack a bundled package, run the following code in the terminal.   

```{bash} 
#| eval: false 
tar xvf package_0.0.0.tar.gz
```   

An uncompressed bundle is different to a source package:   

+ Vignettes have been built and a vignette index exists in `./build`.   
+ Bundles never contain temporary files.  
+ Files listed in `.Rbuildignore` are not included in the bundle.   

Each line of `.Rbuildignore` is a Perl-compatible regular expression that matches (independent of case) to the path of a file in the source package for exclusion from the bundled package.   

The easiest way to modify `.Rbuildignore` is to use `usethis::use_build_ignore()` as it takes care of requirements like regular expression anchoring. The files that should be ignored are:    

+ Files that help to generate content, such as the `README.Rmd` file used to generate `README.md` and `.R` scripts to create or update package data set(s).   
+ Files that aid package development and documentation, such as configuration files for CI/CD and RStudio IDE settings files.   

## Binary package   

The primary maker and distributor of binary packages is CRAN. A binary file is a single platform-specific file (mostly specific to Windows or macOS). When you use `install.packages()`, you are downloading binary R packages for your relevant OS.     

To make a binary package specific to an operating system (OS), use `devtools::buid(binary = TRUE)` and later `R CMD INSTALL --build` in your specific OS.   

The differences between a source, uncompressed bundled and uncompressed binary R package are listed below.   

![](https://r-pkgs.org/diagrams/package-files.png)   

## Installed package   

An installed package is a binary package that has been decompressed locally into a package library. Binary R packages are usually installed using `install.packages()` for CRAN R packages or `pak::pkg_install("r_package")` for local, CRAN or Github R packages.    

## In-memory package   

The function `library(r_package)` loads the package namespace (if it exists in current libraries) and attaches the package environment to the search path. The search path is an ordered list of environments where R looks for functions and objects. In-memory R package functions can be called directly without using `package::function()`.    

**Note:** The function `library(r_package)` does not load the package functions into the global environment.    

Commonly used functions for converting between different R package states are illustrated below.       

![](https://r-pkgs.org/diagrams/install-load.png)   

**Note:** For package development, `devtools::load_all()` helps you to load a source package directly into memory, bypassing package installation requirements.     

## Package libraries    

In R, a library is a directory containing installed packages. Libraries are associated with a specific version of R. You can use `.libPaths()` to identify which libraries are currently active.   

```{r}
# List currently active libraries ----------------------------------------------
.libPaths()
#> [1] "C:/Users/Erika/AppData/Local/R/win-library/4.5"
#> [2] "C:/Program Files/R/R-4.5.0/library"  

# Identify user library path ---------------------------------------------------
Sys.getenv("R_LIBS_USER")
#> [1] "C:\\Users\\Erika\\AppData\\Local/R/win-library/4.5"
```

There are usually 2 active libraries:    

+ A **user** library. Add-on packages installed from package repositories like CRAN or under local development are kept here.     
+ A system-level or **global** library. The core set of base and recommended packages that ship with R are kept here.    

This separation allows users to clean out their add-on packages without disturbing their base R installation.   

**Note:** The function `library()` should never be used inside a package as packages rely on a different mechanism for declaring package dependencies.   


# R Package design considerations  

When considering package purpose:  

+ What are the existing or popular packages in your domain?  
+ Do existing packages follow specific design patterns?  
+ Are there specific data structures that are common as the primary input and output? For example, `mtcars`, `iris` and `penguins`.    

When considering package name:  

+ The name must start with a letter.  
+ The name should only consist of letters and numbers (no underscores or hyphens).    
+ Avoid using periods even if they are technically permitted in package names.  
+ Pick a unique name that is easy to search for and not already in use on CRAN or Bioconductor.   
+ Pick a name that is easy to pronounce.  
+ Abbreviations are okay.  

**Note:** You can check package naming requirements using `pak::pkg_name_check()`.   


# R Package creation process     

Package creation is an iterative process of writing, testing and editing R code. The general steps for R package development are:    

1. Load the devtools package using `library(devtools)`. The easiest way is to automatically attach `devtools` in your `.Rprofile`.   

2. Create your functions, function documentation, unit tests and package documentation. Drafts can be stored in a notebook or script and then assembled as a new source package.   

3. Use `usethis::create_package()` to initialise a new package in a local directory. This directory should be somewhere in your home directory that is separate from where installed packages live. It should also not be nested in another Git repository or R project. Suggestions are to 1) create one directory for all source R packages i.e. `~/r_packages/` and 2) create domain-specific directories for different packages.   

   ```{r}
   # Create your R package -----------------------------------------------------
   usethis::create_package("~/path/to/package")
   ```
  
   This produces the smallest possible working package with:  
  
   + An `R/` directory - the central directory containing all `.R` files.    
   + A basic `DESCRIPTION` file - a file with metadata about your package.   
   + A basic `NAMESPACE` file - a file which declares the functions your package exports for external use and the external functions your package imports from other packages. This file should not be edited by hand.  
   + An optional RStudio project file named `packagename.Rproj`, which can be suppressed with `create_package(..., rstudio = FALSE)`. It is strongly recommended to create a new RStudio project file for each source package as RStudio Projects are isolated and easy to launch.   
   + A `.Rbuildignore` file  - stores a list of files that we need to use during development but should not include when building the R package from source.   
   + A `.gitignore` file - contains a standard `git ignore` template.   

4. Once your package is created (inside RStudio), a new instance of RStudio should appear and open into your new package. You will need to run `library(devtools)` again as this is a new R session.   

5. Convert your R source package and RStudio project into a git repository with `usethis::use_git()`. RStudio may request permission to launch itself in your project.   

   **Note:** Most functions from `usethis` operate on files in the current RStudio Project i.e. the active `usethis` project.  

6. Create a new `.R` file for each user-facing package function and name each file after its function. When you add more functions, you may want to relax this rule and group related functions together. Use `usethis::use_r("custom_function")` to create or open an R script below the `.R/` directory.   

   **Note:** The R script file should only contain your function and not any top-level code for R package development like `library(devtools)` or `usethis::use_git()`.   

7. Use `devtools::load_all()` to load all custom functions and functions imported into your `NAMESPACE` file. All package objects are now available for experimentation but **do not** exist in the global environment. To test this, run `exists("custom_function", where = globalenv(), inherits = FALSE)` and you should see `FALSE`.   

8. Remember to use `git commit` for every R script of custom functions that you create.   

9. Frequently check that all the components of your package still work using `devtools::check()`. This is equivalent to running `R CMD CHECK` in the command line (after quitting R and bundling the package).    

   The following changes are made using `devtools::check()`:  
  
   + Documentation is rendered by running `devtools::document()`.  
   + The package is bundled before checks are made. Bundles do not contain temporary files that can accumulate in the source package.  
   + Unit tests are run by running `devtools::test()`.   
   + Sets `NOT_CRAN` to `"true"` to skip tests on CRAN.  
  
   **Note:** Running `devtools::check()` can return errors, warnings and notes. It is important to fix all errors and warnings.  

10. Edit the `DESCRIPTION` file. Add yourself as the package author and write some descriptive text in the `Title` and `Description` fields. The `License` field should not be manually modified.   

11. Configure a valid package license using `usethis::use_mit_license()` for example.   

12. Help documentation for custom packages are stored in `R/man/custom_function.Rd` and written in an R-specific markup language. Use `devtools::document()` the `roxygen2` package to automate the creation of help documentation. You can insert an `roxygen2` template above your custom function inside RStudio via ***Code > Insert roxygen skeleton***. An example of what this template looks like is below.   

    ```{r}
    #' Split a string
    #'
    #' @param x A character vector with one element.
    #' @param split What to split on.
    #'
    #' @return A character vector.
    #' @export
    #'
    #' @examples
    #' x <- "alfa,bravo,charlie,delta"
    #' strsplit1(x, split = ",")
    strsplit1 <- function(x, split) {
      strsplit(x, split = split)[[1]]
    }
    ``` 

    Then use `devtools::document()` to:  

    + Convert individual roxygen comments into individual `R/man/custom_function.Rd` files.   
    + Update the `NAMESPACE` file based on the `@export` tags in roxygen comments to include `export(custom_function)`. The export directive in `NAMESPACE` is what makes custom functions available to users after they attach your package via `library(custom_package)`.     

13. Check that all the components of your package still work using `devtools::check()`.  

14. Once you have created a minimal viable package with documented and exported functions and comprehensive package metadata, install the package into your library via `install()`. An R CMD build will then be completed.   

    To check that package installation is successful, restart your R session and attach your new library using `library(custom_function)`.   
    
15. To create unit tests, first declare your intent to write unit tests using `usethis::use_test_that()`. This creates your unit testing directory and a `testthat.R` script and suggests the package `testthat` as a package dependency.   

    To create or open a test file, make sure your the R script containing your custom function(s) is open and run `usethis::use_test()`. Add unit tests for each R script into each test file. Functions like `testthat::expect_equal()` are useful for writing unit tests.  

    **Note:** The function `testthat::expect_equal()` relies on waldo::compare() in `testthat` version 3+.      

    ```{r}
    # Unit test example --------------------------------------------------------
    test_that("strsplit1() splits a string", {
      expect_equal(strsplit1("a,b,c", split = ","), c("a", "b", "c"))
    })
    ```

    Run all unit tests using `devtools::test()`. Unit tests also run whenever you run `devtools::check()`.    

    Often during development, you may need to rename an R script. You can use `usethis::rename_files(old_function, new_function)` to rename both the R script and its associated unit testing script.  

16. When you need to use a function from another package in your own package, use `usethis::use_package("existing_package")` to declare these external package requirements. External packages will then be added to the `Imports` field of `DESCRIPTION`.   

    **Note:** When calling functions from external packages inside your custom functions, use the `package::function()` coding style.   

17. Every time you update your package's R scripts, call `devtools::document()` to update `NAMESPACE` and helper R documentation. Then call `devtools::load_all()` to make your updated custom functions available for further experimentation.  

18. To document your overall package, use `usethis::use_readme_rmd()` to create a basic `README.Rmd` file. This function also creates a Git pre-commit hook to help keep `README.Rmd` and `README.md` in sync.  

    The `README.Rmd` file has sections to prompt users to:  

    + Describe the package purpose   
    + Provide installation instructions   
    + Demonstrate package functions   

    Once you have edited your `README.Rmd` file, use `devtools::build_readme()` to carefully render your `README.md` file with the most current version of your package.  

19. Run `devtools::check()` at the end of package development. You can iteratively re-build and install your package locally using `devtools::install()`.     

    A flow chart of the R package development process using `devtools` is found below.  

    ![](https://r-pkgs.org/diagrams/workflow.png)   


# Other notes   

If you want to run `R CMD check` from the command line, first bundle your package and then run the check on the compressed bundle.  

```{bash}
R CMD build somepackage
R CMD check somepackage_0.0.0.9000.tar.gz  
```
